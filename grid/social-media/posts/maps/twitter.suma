// Twitter API Reference: https://developer.twitter.com/en/docs/twitter-api

profile = "social-media/posts@1.0"
provider = "twitter"

map GetProfilePosts {

  http GET "/2/users/{input.profileId}/tweets" {

    request {
      query {
        'tweet.fields' = 'id,text,created_at,attachments'
        expansions = 'attachments.media_keys'
        'media.fields' = 'duration_ms,height,media_key,preview_image_url,type,url,width,alt_text'
        start_time = input.afterDate
        end_time = input.beforeDate
        pagination_token = input.page
        max_results = 25
      }
      headers {
        authorization = "Bearer " + parameters.accessToken
      }
    }

    response 200 "application/json" {
      posts = []

      set if (body.meta.result_count > 0) {
        //map posts in single Jessie script for better performance
        posts = [body].map(body => {
          //get media hashmap
          const mediaHashmap = {}
          if (body.includes.media) {
            for(const media of body.includes.media) {
              mediaHashmap[media.media_key] = media
            }
          }

          //map tweets to posts
          const posts = body.data.map((tweet) => {
            let attachments = []

            if (tweet.attachments && tweet.attachments.media_keys) {
              attachments = tweet.attachments.media_keys.map((mediaKey) => {
                let result = undefined

                let foundMedia = mediaHashmap[mediaKey]

                let duration = undefined

                if(foundMedia && foundMedia.duration_ms) {
                  duration = foundMedia.duration_ms / 1000
                }

                return foundMedia && {
                    type: foundMedia.type,
                    url: foundMedia.url,
                    height: foundMedia.height,
                    width: foundMedia.width,
                    preview: foundMedia.preview_image_url,
                    altText: foundMedia.alt_text,
                    duration: duration
                  }
              })
            }

            return {
              id: tweet.id,
              url: 'https://twitter.com/i/status/' + tweet.id,
              createdAt: tweet.created_at,
              text: tweet.text,
              attachments: attachments.filter(attachment => attachment !== undefined)
            }
          })
          return posts
        })[0]
      }

      map result {
        posts = posts
        previousPage = body.meta.previous_token
        nextPage = body.meta.next_token
      }
    }

    response {
      error = call MapTwitterError(statusCode = statusCode, error = body)
      map error error
    }
  }
}

operation MapTwitterError {
  statusCode = args.statusCode
  twitterError = args.error

  return if (statusCode === 400) {
    title = "Bad request"
    detail = twitterError.detail
  }

  return if (statusCode === 401) {
    title = "Unauthenticated"
    detail = twitterError.detail
  }

  return if (statusCode === 403) {
    title = "Unauthorized"
    detail = twitterError.detail
  }

  return if (statusCode === 404) {
    title = "Not found"
    detail = twitterError.detail
  }

  return if (statusCode === 429) {
    title = "Rate limit exceeded"
    detail = `Twitter API reached max requests quota.`
  }

  return {
    title = "Unknown error"
    detail = (`Unknown error occurred. Status: ${statusCode}`)
  }
}
