profile = "chat/get-destinations@1.0"
provider = "discord"

"""
GetDestinations map
"""
map GetDestinations {
    return map error if (input.server === undefined) {
        title = "Input parameter `server` is required in case of discord provider"
    }

    http GET "/guilds/{input.server}/channels" {
       request "application/json" {
           headers {
               "Authorization" = `Bot ${parameters.accessToken}`
           }
       }

       response 200 "application/json" {
            destinations = call MapDestinations(destinations = body)
		    rateLimit = call MapRateLimitDetails(headers = headers)

            map result {
                destinations = destinations
                rateLimit = rateLimit
            }
       }

       response 400 "application/json" {
           map error {
               title = "Bad Request"
               detail = body
           }
       }

       response 401 "application/json" {
           map error {
               title = "Unauthorized"
               detail = body.message
           }
       }

       response 403 "application/json" {
           map error {
               title = "Forbidden"
               detail = body.message
           }
       }

       response 404 "application/json" {
           map error {
               title = "Not Found"
               detail = body.message
           }
       }

       response 405 "application/json" {
           map error {
               title = "Method not allowed"
               detail = body.message
           }
       }

       response 429 "application/json" {
           rateLimit = call MapRateLimitDetails(headers = headers)

           map error {
               title = "Too many requests"
               detail = body.message
               rateLimit = rateLimit
           }
       }

       response 502 "application/json" {
           map error {
               title = "Gateway unavailable"
               detail = body.message
           }
       }
   }
}

"""
Operation MapDestinations
Returns array mapping destinations in received body
"""
operation MapDestinations {
    destinations = []

    set if(args.destinations && args.destinations.length > 0) {
        destinations = args.destinations.filter(dest => [0, 1, 3, 5].includes(dest.type))
    }

    set if(destinations.length > 0) {
        destinations = call foreach(index of Array(destinations.length).fill().map((_, i) => i)) MapDestination(
            index = index,
            destinations = destinations,
        )
    }

    return destinations
}

operation MapDestination {
    index = args.index
    dest = args.destinations[index]

    resultDest = {
        id: dest.id,
    }

    resultDest.createdAt = call GetTimestamp(id = dest.id)

    set if (dest.name) {
        resultDest.name = dest.name
    }

    set if (dest.topic) {
        resultDest.description = dest.topic
    }

    set if (dest.member_count) {
        resultDest.numOfMembers = dest.member_count
    }

    return resultDest
}

"""
Operation MapRateLimitDetails
Returns object mapping rate limit details specified in received headers
"""
operation MapRateLimitDetails {
	headers = args.headers
	totalRequests = parseInt(headers['x-ratelimit-limit'])
	remainingRequests = parseInt(headers['x-ratelimit-remaining'])
	remainingRequestsPercentage = (parseInt(headers['x-ratelimit-remaining']) / parseInt(headers['x-ratelimit-limit'])) * 100
	resetTimestamp = parseFloat(headers['x-ratelimit-reset'])
	retryAfter = parseInt(headers['x-ratelimit-reset-after'])

	return {
		bucket = headers['x-ratelimit-bucket']
		totalRequests = totalRequests
		remainingRequests = remainingRequests
		remainingRequestsPercentage = remainingRequestsPercentage
		resetTimestamp = resetTimestamp
		retryAfter = retryAfter
	}
}

"""
Operation Get Timestamp

Returns UNIX timestamp from specified discord snowflake id
More about snowflakes: https://discord.com/developers/docs/reference#snowflakes
"""
operation GetTimestamp {
	discordEpoch = 1420070400000

	snowflake = args.id
	processedSnowflake = Number(BigInt(snowflake) >> BigInt(22))

	return processedSnowflake + discordEpoch
}
