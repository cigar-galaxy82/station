profile = "chat/channels@1.0"
provider = "slack"

"""
GetChannels map
"""
map GetChannels {
    types = call typesToQuery(types = input.types)

    http GET "/conversations.list" {
        request "application/x-www-form-urlencoded" {
            query {
                cursor = input.page
                exclude_archived = true
                limit = input.limit
                types = types
            }

            headers {
                "Authorization" = `Bearer ${parameters.accessToken}`
            }
        }

        response 200 "application/json" {
            return map error if (body.ok === false) {
                title = body.error
            }

            channels = call MapChannels(channels = body.channels)

            return map result if (body.has_more === true) {
                nextPage = body.response_metadata.next_cursor
                channels = channels
            }

            return map result {
                channels = channels
            }
        }

		response 429 {
			map error {
				title = 'Too Many Requests'
				detail = `Retry after ${headers['Retry-After']} seconds`
			}
		}

        response "application/json" {
            map error {
                title = body.error
            }
        }
    }
}

operation MapChannels {
    channels = []
    
    set if (args.channels && args.channels.length > 0) {
        channels = call foreach(index of Array(args.channels.length).fill().map((_, i) => i)) MapChannel(
            index = index,
            channels = args.channels,
        )
    }

    return channels
}

operation MapChannel {
    index = args.index
    channel = args.channels[index]

    resultChannel = {
        id: channel.id,
        createdAt: channel.created
    }

    set if (channel.name) {
        resultChannel.name = channel.name;
    }

    set if (channel.topic.value && channel.topic.value !== '') {
        resultChannel.description = channel.topic.value;
    }
    
    set if (resultChannel.description !== undefined && channel.purpose.value && channel.purpose.value !== '') {
        resultChannel.description = resultChannel.description + ` - ${channel.purpose.value}`;
    }

    set if (resultChannel.description === undefined && channel.purpose.value && channel.purpose.value !== '') {
        resultChannel.description = channel.purpose.value
    }

    set if (channel.num_members) {
        resultChannel.numOfMembers = channel.num_members;
    }

    return resultChannel
}

operation typesToQuery {
   types = args.types.map(type => {
       if (type === 'private') {
           return 'private_channel';
       } else if (type === 'public') {
           return 'public_channel';
       }
   }).join(',')

   return types;
}