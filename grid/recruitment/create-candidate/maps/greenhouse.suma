profile = "recruitment/create-candidate@2.1"
provider = "greenhouse"

map CreateCandidate {

  call MapInputToAttachments(cv = input.cv) {
    return map error if (outcome.error) outcome.error
    attachments = outcome.data.attachments
  }

  http POST "/v1/candidates" {
    security "apiKeyBasicAuth"

    request "application/json" {
      headers {
        "On-Behalf-Of" = parameters.ON_BEHALF_OF
      }

      body {
        first_name = input.firstName
        last_name = input.lastName
        email_addresses = [{
          type: "work",
          value: input.email
        }]
        website_addresses = (input.links || []).map((link) => {
          return {
            value: link.url,
            type: "other"
          }
        })
        phone_numbers = input.phone ? [{
          type: "work",
          value: input.phone
        }] : []
        addresses = input.address ? [{
          type: "work",
          value: input.address
        }] : []
        employments = (input.workExperience || []).map((experience) => {
          return {
            company_name: experience.company,
            title: experience.position,
            start_date: experience.startedAt,
            end_date: experience.endedAt
          }
        })
        applications = [{
          job_id: input.jobId,
          initial_stage_id: input.stageId,
          attachments: attachments
        }]

      }
    }

    response 201 "application/json" {
      map result {
        id = String(body.id)
        jobId = input.jobId
      }
    }

    response 401 "application/json" {
      map error {
        title = 'Unauthenticated'
        detail = body.message
        code = 'Unauthenticated'
      }
    }

    response 422 "application/json" {
      map error {
        title = 'Unprocessable Entity'
        detail = body
        code = 'BadRequest'
      }
    }
  }
}

map CreateCandidateFeatures {
  supportedMimeTypes = call getSupportedMimeTypes()
  map result {
    cvMIMETypes = call getSupportedMimeTypes()
    cvUploadMethods = ['url', 'file']
  }
}

operation getSupportedMimeTypes {
  return ["application/atom+xml", "application/javascript", "application/json", "application/msgpack", "application/msword", "application/pdf", "application/rss+xml", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "application/vnd.ms-powerpoint", "application/xml", "application/x-www-form-urlencoded", "application/x-yaml", "application/zip", "multipart/form-data", "image/bmp", "image/gif", "image/jpeg", "image/png", "image/tiff", "text/calendar", "text/css", "text/csv", "text/html", "text/javascript", "text/plain", "text/vcard", "video/mpeg"]
}

operation MapInputToAttachments {
  return if (args.cv && args.cv.url) {
    attachments = [{
      type: "resume",
      filename: args.cv.fileName,
      url: args.cv.url,
      content_type: args.cv.mimeType
    }]
  }

  fail if (args.cv && (args.cv.data || args.cv.url) && !args.cv.fileName) {
    title = "Missing CV file name"
    detail = "CV file name is required."
    code = "CVFileNameRequired"
  }

  fail if (args.cv && args.cv.data && !args.cv.mimeType) {
    title = "Missing mimeType"
    detail = "CV mime type is required."
    code = "CVMIMETypeNotSupported"
  }

  supportedMimeTypes = call getSupportedMimeTypes()
  fail if (args.cv && args.cv.data && !supportedMimeTypes.includes(args.cv.mimeType)) {
    title = "CV MIME type not supported"
    detail = `File type ${args.cv.mimeType} is not supported by Greenhouse.`
    code = "CVMIMETypeNotSupported"
  }

  set if (args.cv && args.cv.data) {
    cvDataBuffer = args.cv.data.getAllData()
  }

  return if (args.cv && args.cv.data){
    attachments = [{
      type: "resume",
      content: cvDataBuffer.toString('base64'),
      filename: args.cv.fileName,
      content_type: args.cv.mimeType
    }]
  }

  return {
    attachments = []
  }
}