profile = "recruitment/list-stage-changes@1.0"
provider = "workable"

map ListStageChanges {
  call CheckSubdomainExists(
    clientId = parameters.CLIENT_ID,
    subdomain = parameters.SUBDOMAIN
  ) {
    return map error if (outcome.error) outcome.error
  }
  
  call CheckCandidateExists(
    clientId = parameters.CLIENT_ID,
    candidateId = input.candidateId
  ) {
    return map error if (outcome.error) outcome.error
  }

  call GetStageChanges(
    clientId = parameters.CLIENT_ID,
    candidateId = input.candidateId
  ) {
    return map error if (outcome.error) outcome.error

    getStageChangesOutcome = outcome.data
  }

  return map result {
    changes = getStageChangesOutcome.changes
    rateLimit = getStageChangesOutcome.rateLimit
  }
}

// Workable rate limits docs: https://workable.readme.io/reference/rate-limits
operation MapRateLimit {
  totalRequests = parseInt(args.headers['x-rate-limit-limit'], 10)
  remainingRequests = parseInt(args.headers['x-rate-limit-remaining'], 10)
  remainingRequestsPercentage = undefined
  resetTimestamp = parseInt(args.headers['x-rate-limit-reset'], 10)

  set if(isNaN(totalRequests)) {
    totalRequests = undefined
  }

  set if(isNaN(remainingRequests)) {
    remainingRequests = undefined
  }

  set if(totalRequests > 0 && remainingRequests !== undefined) {
    remainingRequestsPercentage = remainingRequests / totalRequests * 100
  }

  set if(isNaN(resetTimestamp, 10)) {
    resetTimestamp = undefined
  }

  return {
    bucket = 'workable'
    totalRequests = totalRequests
    remainingRequests = remainingRequests
    remainingRequestsPercentage = remainingRequestsPercentage
    resetTimestamp = resetTimestamp
  }
}

operation MapWorkableError {
  statusCode = args.statusCode
  workableError = args.error

  rateLimit = call MapRateLimit(headers = args.headers)

  return if (statusCode === 400) {
    title = 'Bad request'
    detail = workableError
    code = 'BadRequest'
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = 'Unauthenticated'
    detail = workableError
    code = 'Unauthenticated'
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = 'Unauthorized'
    detail = workableError
    code = 'Unauthorized'
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = 'Not found'
    detail = workableError
    code = 'NotFound'
    rateLimit = rateLimit
  }

  return if (statusCode === 422) {
    title = 'Conflict'
    detail = workableError 
    code = 'Conflict'
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = 'Rate limit exceeded'
    detail = 'You reached max requests quota.'
    code = 'RateLimitReached'
    rateLimit = rateLimit
  }

  return {
    title = "Unknown error"
    detail = workableError
    code = 'UnknownError'
    rateLimit = rateLimit
  }
}

operation GetStageChanges {
  http GET "/spi/v3/candidates/{ args.candidateId }/activities" {
    security "bearer_token"

    request {
      headers {
        'X-WORKABLE-CLIENT-ID' = args.clientId
      }
    }

    response 200 "application/json" {
      changes = (() => {
        return body.activities
          .filter(activity => activity.stage_name !== null || activity.action === 'applied')
          .map(stageActivity => ({
            id: stageActivity.id,
            stageId: stageActivity.action,
            name: stageActivity.action === 'applied' ? 'Applied' : stageActivity.stage_name,
            current: false,
            createdAt: stageActivity.created_at,
          }));
      })()

      tmp = changes[changes.length - 1].current = true

      return {
        changes = changes
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapWorkableError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )
      
      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation CheckSubdomainExists {
  http GET "/spi/v3/accounts/{ args.subdomain }" {
    security "bearer_token"

    request {
      headers {
        'X-WORKABLE-CLIENT-ID' = args.clientId
      }
    }

    response 200 {       
      return {}
    }

    response 422 "application/json" {
      fail {
        title = 'Not Found'
        detail = 'Unable to get subdomain by name ' + args.subdomain + '. Check that the subdomain with that name exists.'
        code = 'NotFound'
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapWorkableError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation CheckCandidateExists {
  http GET "/spi/v3/candidates/{ args.candidateId }" {
    security "bearer_token"

    request {
      headers {
        'X-WORKABLE-CLIENT-ID' = args.clientId
      }
    }

    response 200 {       
      return {}
    }

    response 404 "application/json" {
      fail {
        title = 'Not Found'
        detail = 'Unable to get candidate by ID ' + args.candidateId + '. Check that the candidate with that ID exists.'
        code = 'NotFound'
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapWorkableError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}
