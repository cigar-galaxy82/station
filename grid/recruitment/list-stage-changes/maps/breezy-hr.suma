profile = "recruitment/list-stage-changes@1.0"
provider = "breezy-hr"

map ListStageChanges {
  return map error if (!input.jobId) {
    title = "Missing required field `jobId`"
    detail = "Job ID is required for provider Breezy HR. Please provide it in the input."
    code = "BadRequest"
  }

  call CheckCompanyExists (
    accessToken = parameters.ACCESS_TOKEN,
    companyId = parameters.COMPANY_ID,
  ) { 
    return map error if (outcome.error) outcome.error
  }

  call CheckJobExists (
    accessToken = parameters.ACCESS_TOKEN,
    companyId = parameters.COMPANY_ID,
    jobId = input.jobId,
  ) { 
    return map error if (outcome.error) outcome.error
  }

  call CheckCandidateExists (
    accessToken = parameters.ACCESS_TOKEN,
    companyId = parameters.COMPANY_ID,
    jobId = input.jobId,
    candidateId = input.candidateId,
  ) {
    return map error if (outcome.error) outcome.error
  }

  call ListStageChanges (
    accessToken = parameters.ACCESS_TOKEN,
    companyId = parameters.COMPANY_ID,
    jobId = input.jobId,
    candidateId = input.candidateId,
  ) {
    return map error if (outcome.error) outcome.error

    stageChangesList = outcome.data
  }

  return map result {
    changes = stageChangesList.changes,
    rateLimit = stageChangesList.rateLimit
  }
}

// Breezy HR rate limits docs: https://developer.breezy.hr/reference/rate-limiting
operation MapRateLimit {
  totalRequests = parseInt(args.headers['x-ratelimit-limit'], 10)
  remainingRequests = parseInt(args.headers['x-ratelimit-remaining'], 10)
  remainingRequestsPercentage = undefined
  resetTimestamp = parseInt(args.headers['x-ratelimit-reset'], 10)

  set if(isNaN(totalRequests)) {
    totalRequests = undefined
  }

  set if(isNaN(remainingRequests)) {
    remainingRequests = undefined
  }

  set if(totalRequests > 0 && remainingRequests !== undefined) {
    remainingRequestsPercentage = remainingRequests / totalRequests * 100
  }

  set if(isNaN(resetTimestamp, 10)) {
    resetTimestamp = undefined
  }

  return {
    bucket = 'breezy-hr'
    totalRequests = totalRequests
    remainingRequests = remainingRequests
    remainingRequestsPercentage = remainingRequestsPercentage
    resetTimestamp = resetTimestamp
  }
}

operation MapBreezyHRError {
  statusCode = args.statusCode
  workableError = args.error

  rateLimit = call MapRateLimit(headers = args.headers)

  return if (statusCode === 400) {
    title = 'Bad request'
    detail = workableError
    code = 'BadRequest'
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = 'Unauthenticated'
    detail = workableError
    code = 'Unauthenticated'
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = 'Unauthorized'
    detail = workableError
    code = 'Unauthorized'
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = 'Not found'
    detail = workableError
    code = 'NotFound'
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = 'Rate limit exceeded'
    detail = 'You reached max requests quota.'
    code = 'RateLimitReached'
    rateLimit = rateLimit
  }

  return {
    title = "Unknown error"
    detail = workableError
    code = 'UnknownError'
    rateLimit = rateLimit
  }
}

operation ListStageChanges {
  http GET "/v3/company/{ args.companyId }/position/{ args.jobId }/candidate/{ args.candidateId }/stream" {
    
    request "application/json" {
      headers {
        Authorization = args.accessToken
      }
    }

    response 200 "application/json" {
      changes = body.filter(event => event.type === 'candidateStatusUpdated').map(stageChange => {
        const result = {
          id: stageChange._id,
          stageId: stageChange.object.status,
          name: stageChange.object.stage.name,
          current: false,
          createdAt: stageChange.object.entered_stage
        }

        if (stageChange.object.reason) {
          result.description = stageChange.object.reason;
        }

        return result;
      })

      tmp = changes[0].current = true

      return {
        changes = changes
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapBreezyHRError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation CheckCandidateExists {
  http GET "/v3/company/{ args.companyId }/position/{ args.jobId }/candidate/args.candidateId" {

    request {
      headers {
        Authorization = args.accessToken
      }
    }

    response 200 {
      return {}
    }

    response 500 "application/json" {
      fail {
        title = 'Not Found'
        detail = 'Unable to get candidate under ID ' + args.jobId + '. Check that the candidate with that ID exists.'
        code = 'NotFound'
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapBreezyHRError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation CheckJobExists {
  http GET "/v3/company/{ args.companyId }/position/{ args.jobId }" {

    request {
      headers {
        Authorization = args.accessToken
      }
    }

    response 200 {       
      return {}
    }

    response 500 "application/json" {
      fail {
        title = 'Not Found'
        detail = 'Unable to get job under ID ' + args.jobId + '. Check that the job with that ID exists.'
        code = 'NotFound'
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapBreezyHRError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation CheckCompanyExists {
  http GET "/v3/company/{ args.companyId }" {

    request {
      headers {
        Authorization = args.accessToken
      }
    }

    response 200 {       
      return {}
    }

    response 500 "application/json" {
      fail {
        title = 'Not Found'
        detail = 'Unable to get company under ID ' + args.companyId + '. Check that the company with that ID exists.'
        code = 'NotFound'
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapBreezyHRError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}