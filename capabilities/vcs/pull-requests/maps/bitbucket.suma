profile = "vcs/pull-requests@1.0"
provider = "bitbucket"

"""
PullRequests map
"""
map PullRequests{
  owner = input.owner
  repo = input.repo

  call Paginate(
  owner = input.owner,
  repo = input.repo,
  ) {
      return map error if (outcome.data.statusCode !== 200) outcome.data
      return map result { pullRequests = outcome.data.pullRequests }
    }
}

operation Paginate {
  maximumPagesNumber = 100

  data = []
  page = 1
  //Hack to ceate a while loop with maximum loop count
  call foreach(_x of Array(maximumPagesNumber)) FetchPullRequests(owner = args.owner, repo = args.repo, page = page) {
    o = outcome.data
    fail if (outcome.data.statusCode !== 200) outcome.data

    data = [...data, ...outcome.data.pullRequests]

    page = page + 1
    return if (outcome.data.isLastPage) {
      pullRequests: data,
      statusCode: 200
    }
  }
  return {
      pullRequests: data,
      statusCode: 200
  }
 }

operation FetchPullRequests {
  http GET "/2.0/repositories/{args.owner}/{args.repo}/pullrequests" {
    request {
      query {
        page = args.page
      }
    }
    response  {
      l = body
      fail if(statusCode !== 200) {
        message: body.message,
        statusCode: statusCode
      }
      return {
        pullRequests: body.values.map((pr) => {
          return {
            title: pr.title,
            id: pr.id,
            url: pr.links.html.href,
            sha: pr.source.commit.hash,
          }
        }),
        statusCode: statusCode,
        isLastPage: body.next ? false : true
      }
    }
  }
}
  