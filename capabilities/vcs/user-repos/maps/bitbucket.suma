profile = "vcs/user-repos@2.0"
provider = "bitbucket"

"""
UserRepos map. Returns repositories of specified user
"""
map UserRepos{
    call Paginate(
    user = input.user,
    perPage = input.perPage,
    maximumPagesNumber = input.maximumRequestsNumber
    ) {
        return map error if (outcome.data.statusCode !== 200) outcome.data
        return map result { repos = outcome.data.repositories }
    }
}

operation Paginate {
  perPage = args.perPage

  maximumPagesNumber = args.maximumPagesNumber || 20

  data = []
  page = 1
  //Hack to ceate a while loop with maximum loop count
    call foreach(_x of Array(maximumPagesNumber)) FetchRepos(user = args.user, page = page) {
      fail if (outcome.data.status !== 200) outcome.data

      data = [...data, ...outcome.data.repositories]
    
      page = page + 1
      return if (outcome.data.isLastPage) {
        repositories: data,
        statusCode: 200
      }
    }
  return {
      repositories: data,
      statusCode: 200
  }
}


operation FetchRepos {
    http GET "/2.0/repositories/{args.user}" {
    request {
      query {
        page = args.page
      }
    }

    response {
        fail if (statusCode !== 200){
            message: body.error.message,
            statusCode: statusCode
        }
       return {
        repositories: body.values.map((r) => {
          return {
            name: r.name,
            description: r.description === "" ? undefined : r.description
          }
        }),
        status: statusCode,
        isLastPage: body.next ? false : true
      }
    }
  }
}
