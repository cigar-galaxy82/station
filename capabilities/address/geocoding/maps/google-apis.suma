profile = "address/geocoding@3.0"
provider = "google-apis"

// Google Geocoding API documentation
//   https://developers.google.com/maps/documentation/geocoding/start

map Geocode {
  payload = input.query || `${input.streetAddress || ""} ${input.addressLocality || ""} ${input.addressRegion || ""} ${input.postalCode || ""} ${input.addressCountry || ""}`;

  http GET "/maps/api/geocode/json" {
    security "apikey"
    request {
      query {
        address = payload
      }
    }

    response 200 "application/json" {
      return map error if (body.status !== "OK") {
        title = "Error geocoding address"
        detail = body.status
      }

      map result {
        latitude = body.results[0].geometry.location.lat
        longitude = body.results[0].geometry.location.lng
      }
    }
  }
}

map ReverseGeocode {
  payload = `${input.latitude},${input.longitude}`;

  http GET "/maps/api/geocode/json" {
    security "apikey"
    request {
      query {
        latlng = payload
      }
    }

    response 200 "application/json" {
      return map error if (body.status !== "OK") {
        title = "Error reverse geocoding coordinates"
        detail = body.status
      }

      filteredResults = body.results.filter(result => result.types.includes("street_address") )

      map result filteredResults.map(result => {
        const mappedAddress = {};

        for (const component of result.address_components) {
          // country code
          if (component.types.includes("country")) {
            mappedAddress.addressCountry = component.short_name;
          }

          // region
          if (component.types.includes("administrative_area_level_1")) {
            mappedAddress.addressRegion = 
              mappedAddress.addressRegion 
              ? `${mappedAddress.addressRegion}, ${component.short_name}` 
              : component.short_name;
          }
          if (component.types.includes("administrative_area_level_2")) {
            mappedAddress.addressRegion = 
              mappedAddress.addressRegion 
              ? `${component.short_name}, ${mappedAddress.addressRegion}` 
              : component.short_name;
          }

          // locality
          if (component.types.includes("locality")) {
            mappedAddress.addressLocality = component.short_name;
          }
          if (component.types.includes("sublocality_level_1")) {
            mappedAddress.addressLocality = 
              mappedAddress.addressLocality 
              ? `${component.short_name}, ${mappedAddress.addressLocality}` 
              : component.short_name;
          }
          if (component.types.includes("sublocality_level_2")) {
            mappedAddress.addressLocality = 
              mappedAddress.addressLocality 
              ? `${component.short_name}, ${mappedAddress.addressLocality}` 
              : component.short_name;
          }
          
          // street number
          if (component.types.includes("street_number")) {
            mappedAddress.streetAddress = component.short_name;
          }

          // street address
          if (component.types.includes("route")) {
            mappedAddress.streetAddress = 
              mappedAddress.streetAddress 
              ? `${mappedAddress.streetAddress} ${component.short_name}` 
              : component.short_name;
          }

          // postal code
          if (component.types.includes("postal_code")) {
            mappedAddress.postalCode = component.short_name;
          }
        }

        // formatted address
        if (result.formatted_address) {
          mappedAddress.formattedAddress = result.formatted_address
        }
        
        return mappedAddress
      }) 
    }
  }
}
