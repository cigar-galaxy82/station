profile = "address/geocoding@3.1"
provider = "azure-maps"

// Azure Maps API documentation
//   https://docs.microsoft.com/en-us/azure/azure-maps/

map Geocode {
  payload = input.query || `${input.streetAddress || ""} ${input.addressLocality || ""} ${input.addressRegion || ""} ${input.postalCode || ""} ${input.addressCountry || ""}`;

  http GET "/json" {
    request {
      query {
        'subscription-key' = input.subscriptionKey
        'api-version' = '1.0'
        query = payload
      }
    }

    response 200 "application/json" {
      return map error if (body.results.length === 0) {
        title = "Error geocoding address"
      }

      map result {
        latitude = body.results[0].position.lat
        longitude = body.results[0].position.lon
      }
    }
  }
}

map ReverseGeocode {
  payload = `${input.latitude},${input.longitude}`;

  http GET "/reverse/json" {
    request {
      query {
        'subscription-key' = input.subscriptionKey
        'api-version' = '1.0'
        query = payload
      }
    }

    response 200 "application/json" {
      return map error if (body.addresses.length === 0) {
        title = "Error reverse geocoding coordinates"
      }

      addresses = body.addresses.map(item => item.address).filter(item => item.countryCode || item.freeformAddress);

      return map error if (addresses.length === 0) {
          title = "Could not find any information about address."
      }
      
      map result addresses.map(address => {
        result = {}
        
        // country code
        if (address.countryCodeISO3 || address.countryCode) {
            result.addressCountry = address.countryCodeISO3 || address.countryCode;
        }

        // region
        if (address.countrySubdivision) {
            result.addressRegion = 
              address.countrySecondarySubdivision
              ? `${address.countrySecondarySubdivision}, ${address.countrySubdivision}`
              : address.countrySubdivision;
        }

        // locality
        if (address.countrySubdivisionName) {
            result.addressLocality = 
                address.localName 
                ? `${address.localName}, ${address.countrySubdivisionName}` 
                : address.countrySubdivisionName
        }

        // street address
        if (address.streetName || address.streetNameAndNumber) {
            result.streetAddress = address.streetNameAndNumber || address.streetName;
        }

        // postal code
        if (address.postalCode || address.extendedPostalCode) {
            result.postalCode = address.postalCode || address.extendedPostalCode
        }

        // formatted address
        if (address.freeformAddress) {
            result.formattedAddress = 
                address.country 
                ? `${address.freeformAddress}, ${address.country}` 
                : address.freeformAddress
        }

        return result
      });
    }
  }
}
