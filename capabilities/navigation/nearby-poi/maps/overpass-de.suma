profile = "navigation/nearby-poi@1.0"
provider = "overpass-de"

map NearbyPoi {
  center = input.center
  http POST "/api/interpreter" {
    request "application/x-www-form-urlencoded" {
      body {
        data = call BuildQuery(
          latitude = center.latitude,
          longitude = center.longitude,
          radius = input.radius,
          categories = input.categories || []
        )
      }
    }

    response 200 "application/json" {
      return map error if (body.remarks && body.remarks.includes("Query timed out")) {
        status: "TIMEOUT",
        message: body.remarks
      }

      points = call foreach(node of body.elements) ConvertResponse(node = node)
      map result points
    }
  }
}

"""
Build an overpass API query

The query timeout is set to 10 seconds.
"""
operation BuildQuery {
  amenities = call CategoriesToAmenities(categories = args.categories)
  amenityFilter = ""
  set if (amenities.length > 0) {
    amenityFilter = `[amenity~"^(${amenities.join("|")})$"]`
  }
  
  query = `
    [out:json][timeout:10];
    node(around:${args.radius},${args.latitude},${args.longitude})${amenityFilter};

    out;
  `

  return query
}

operation ConvertResponse {
  nodeTags = args.node.tags || {}

  categories = []
  set if (nodeTags.amenity) {
    categories = call AmenitiesToCategories(amenities = [nodeTags.amenity])
  }

  point = {
    coordinates: {
      latitude: args.node.lat,
      longitude: args.node.lon,
    },
    name: nodeTags.name || args.node.id.toString(),
    categories: categories
  }

  return point
}

"""
Converts a list of categories into a list of amenities
"""
operation CategoriesToAmenities {
  return if (!args.categories) []

  categoryAmenityMap = {
    "RESTAURANT": ["restaurant"],
    "CAFE": ["cafe"],
    "BAR": ["bar", "pub"],
  }

  amenities = args.categories.flatMap(
    category => categoryAmenityMap[category]
  )

  return amenities
}

"""
Converts a list of amenities to categories
"""
operation AmenitiesToCategories {
  return if (!args.amenities) []

  amenityCategoryMap = {
    "restaurant": "RESTAURANT",
    "cafe": "CAFE",
    "bar": "BAR",
    "pub": "BAR"
  }

  categories = (() => {
    const categories = []

    for (const amenity of args.amenities) {
      const category = amenityCategoryMap[amenity]
      if (category !== undefined && !categories.includes(category)) {
        categories.push(category)
      }
    }

    return categories
  })()

  return categories
}
